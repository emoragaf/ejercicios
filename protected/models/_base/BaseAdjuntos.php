<?php

/**
 * This is the model base class for the table "adjuntos".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Adjuntos".
 *
 * Columns in table "adjuntos" available as properties of the model,
 * followed by relations of table "adjuntos" available as properties of the model.
 *
 * @property integer $id
 * @property string $filename
 * @property string $extension
 * @property string $path
 * @property string $created_at
 * @property string $updated_at
 *
 * @property AdjuntosLineas[] $adjuntosLineases
 */
abstract class BaseAdjuntos extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'adjuntos';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Adjuntos|Adjuntoses', $n);
	}

	public static function representingColumn() {
		return 'filename';
	}

	public function rules() {
		return array(
			array('filename, extension, path, created_at', 'required'),
			array('filename, path', 'length', 'max'=>255),
			array('extension', 'length', 'max'=>45),
			array('updated_at', 'safe'),
			array('updated_at', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, filename, extension, path, created_at, updated_at', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'adjuntosLineases' => array(self::HAS_MANY, 'AdjuntosLineas', 'id_adjunto'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'filename' => Yii::t('app', 'Filename'),
			'extension' => Yii::t('app', 'Extension'),
			'path' => Yii::t('app', 'Path'),
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
			'adjuntosLineases' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('filename', $this->filename, true);
		$criteria->compare('extension', $this->extension, true);
		$criteria->compare('path', $this->path, true);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('updated_at', $this->updated_at, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}